import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:supabase_flutter/supabase_flutter.dart';
import 'secrets.dart';

final navigatorKey = GlobalKey<NavigatorState>();

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(url: supabaseUrl, anonKey: supabaseAnonKey);

  // route on auth change
  Supabase.instance.client.auth.onAuthStateChange.listen((data) {
    switch (data.event) {
      case AuthChangeEvent.signedIn:
        navigatorKey.currentState?.pushReplacementNamed('/home');
        break;
      case AuthChangeEvent.signedOut:
        navigatorKey.currentState?.pushReplacementNamed('/login');
        break;
      default:
        break;
    }
  });

  runApp(const App());
}

class App extends StatelessWidget {
  const App({super.key});
  @override
  Widget build(BuildContext context) {
    final user = Supabase.instance.client.auth.currentUser;
    return MaterialApp(
      navigatorKey: navigatorKey,
      title: 'Grookai Vault',
      theme: ThemeData(useMaterial3: true, colorSchemeSeed: Colors.green),
      initialRoute: user == null ? '/login' : '/home',
      routes: {
        '/login': (_) => const LoginPage(),
        '/home': (_) => const HomePage(),
        '/vault': (_) => const VaultPage(),
      },
    );
  }
}

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});
  @override
  State<LoginPage> createState() => _LoginPageState();
}
class _LoginPageState extends State<LoginPage> {
  final _email = TextEditingController();
  final _password = TextEditingController();
  String? _err; bool _loading = false;

  Future<void> _auth({required bool signup}) async {
    setState(() { _err = null; _loading = true; });
    try {
      final c = Supabase.instance.client;
      if (signup) {
        await c.auth.signUp(email: _email.text.trim(), password: _password.text.trim());
      } else {
        await c.auth.signInWithPassword(email: _email.text.trim(), password: _password.text.trim());
      }
      // navigation handled by listener
    } catch (e) {
      setState(() => _err = e.toString());
    } finally { setState(() => _loading = false); }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Grookai Vault • Sign in')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(children: [
          TextField(controller: _email, decoration: const InputDecoration(labelText: 'Email')),
          const SizedBox(height: 8),
          TextField(controller: _password, decoration: const InputDecoration(labelText: 'Password'), obscureText: true),
          const SizedBox(height: 16),
          if (_err != null) Text(_err!, style: const TextStyle(color: Colors.red)),
          const SizedBox(height: 8),
          Row(children: [
            Expanded(child: ElevatedButton(
              onPressed: _loading ? null : () => _auth(signup:false),
              child: _loading ? const CircularProgressIndicator() : const Text('Sign In'),
            )),
            const SizedBox(width: 8),
            Expanded(child: OutlinedButton(
              onPressed: _loading ? null : () => _auth(signup:true),
              child: const Text('Create account'),
            )),
          ])
        ]),
      ),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});
  @override
  State<HomePage> createState() => _HomePageState();
}
class _HomePageState extends State<HomePage> {
  String _apiResult = '(no call yet)'; bool _calling = false;

  Future<void> _callConditionApi() async {
    setState(() { _calling = true; _apiResult = 'calling...'; });
    try {
      final uri = Uri.parse('$conditionApiBaseUrl/condition/score');
      final body = jsonEncode({
        "images": {"front_url": "test.jpg", "back_url": "test2.jpg", "corner_urls": []},
        "conservative": true
      });
      final res = await http
          .post(uri, headers: {'Content-Type': 'application/json'}, body: body)
          .timeout(const Duration(seconds: 10));
      setState(() => _apiResult = 'HTTP ${res.statusCode}\n${res.body}');
    } catch (e) {
      setState(() => _apiResult = 'Error: $e');
    } finally { setState(() => _calling = false); }
  }

  @override
  Widget build(BuildContext context) {
    final email = Supabase.instance.client.auth.currentUser?.email ?? '(unknown)';
    return Scaffold(
      appBar: AppBar(title: const Text('Grookai Vault • Home'), actions: [
        IconButton(
          onPressed: () async { await Supabase.instance.client.auth.signOut(); },
          icon: const Icon(Icons.logout),
          tooltip: 'Sign out',
        )
      ]),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: [
          Text('Signed in as: $email'),
          const SizedBox(height: 12),
          ElevatedButton.icon(
            onPressed: () => Navigator.pushNamed(context, '/vault'),
            icon: const Icon(Icons.inventory_2),
            label: const Text('Open Vault'),
          ),
          const SizedBox(height: 16),
          ElevatedButton.icon(
            onPressed: _calling ? null : _callConditionApi,
            icon: _calling ? const SizedBox(width:16,height:16,child:CircularProgressIndicator(strokeWidth:2))
                           : const Icon(Icons.settings),
            label: const Text('Test Condition API'),
          ),
          const SizedBox(height: 12),
          Expanded(child: SingleChildScrollView(
            child: Text(_apiResult, style: const TextStyle(fontFamily: 'monospace')),
          )),
        ]),
      ),
    );
  }
}

class VaultPage extends StatefulWidget {
  const VaultPage({super.key});
  @override
  State<VaultPage> createState() => _VaultPageState();
}

class _VaultPageState extends State<VaultPage> {
  final _search = TextEditingController();
  bool _loading = false;
  List<Map<String, dynamic>> _cardResults = [];
  List<Map<String, dynamic>> _vaultItems = [];

  @override
  void initState() {
    super.initState();
    _loadVault();
  }

  Future<void> _searchCards() async {
    setState(() => _loading = true);
    try {
      final res = await Supabase.instance.client
          .from('card_prints')
          .select('id, name, number')
          .ilike('name', '%${_search.text.trim()}%')
          .limit(50);
      _cardResults = (res as List).cast<Map<String, dynamic>>();
    } catch (e) {
      _cardResults = [];
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Search error: $e')));
      }
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _loadVault() async {
    final uid = Supabase.instance.client.auth.currentUser!.id;
    try {
      final rows = await Supabase.instance.client
          .from('vault_items')
          .select('id, qty, condition_label, condition_score, created_at, card_prints(name, number)')
          .eq('user_id', uid)
          .order('created_at', ascending: false);

      _vaultItems = (rows as List).cast<Map<String, dynamic>>();
      if (mounted) setState(() {});
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Load vault error: $e')));
      }
    }
  }

  Future<void> _addToVault(String cardId) async {
    final uid = Supabase.instance.client.auth.currentUser!.id;
    try {
      await Supabase.instance.client.from('vault_items').insert({
        'user_id': uid,
        'card_id': cardId,
        'qty': 1,
      });
      await _loadVault();
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(const SnackBar(content: Text('Added to vault')));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Add error: $e')));
      }
    }
  }

  Future<void> _incQty(String id, int delta) async {
    try {
      final row = _vaultItems.firstWhere((e) => e['id'] == id);
      final int current = (row['qty'] ?? 1) as int;
      final int next = (current + delta).clamp(0, 999);
      if (next == 0) {
        await Supabase.instance.client.from('vault_items').delete().eq('id', id);
      } else {
        await Supabase.instance.client
            .from('vault_items')
            .update({'qty': next}).eq('id', id);
      }
      await _loadVault();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Update error: $e')));
      }
    }
  }

  Future<void> _deleteItem(String id) async {
    try {
      await Supabase.instance.client.from('vault_items').delete().eq('id', id);
      await _loadVault();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Delete error: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Your Vault')),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          children: [
            TextField(
              controller: _search,
              decoration: InputDecoration(
                labelText: 'Search card name',
                suffixIcon: IconButton(
                  icon: const Icon(Icons.search),
                  onPressed: _searchCards,
                ),
              ),
              onSubmitted: (_) => _searchCards(),
            ),
            if (_loading) const LinearProgressIndicator(),
            const SizedBox(height: 8),
            if (_cardResults.isNotEmpty) ...[
              const Align(
                alignment: Alignment.centerLeft,
                child: Text('Results', style: TextStyle(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: ListView.separated(
                  itemCount: _cardResults.length,
                  separatorBuilder: (_, __) => const Divider(height: 1),
                  itemBuilder: (context, i) {
                    final c = _cardResults[i];
                    final id = c['id'] as String;
                    final name = (c['name'] ?? 'Card') as String;
                    final number = (c['number'] ?? '') as String;
                    return ListTile(
                      leading: const Icon(Icons.style),
                      title: Text(name),
                      subtitle: Text(number),
                      trailing: IconButton(
                        icon: const Icon(Icons.add_circle_outline),
                        onPressed: () => _addToVault(id),
                      ),
                    );
                  },
                ),
              ),
            ] else ...[
              const Align(
                alignment: Alignment.centerLeft,
                child: Text('Your Items', style: TextStyle(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: RefreshIndicator(
                  onRefresh: () async => _loadVault(),
                  child: ListView.separated(
                    itemCount: _vaultItems.length,
                    separatorBuilder: (_, __) => const Divider(height: 1),
                    itemBuilder: (context, i) {
                      final row = _vaultItems[i];
                      final card = (row['card_prints'] ?? {}) as Map<String, dynamic>;
                      final name = (card['name'] ?? 'Card') as String;
                      final number = (card['number'] ?? '') as String;
                      final qty = row['qty'] ?? 1;
                      final label = row['condition_label'] ?? '-';
                      final score = row['condition_score']?.toString() ?? '-';
                      return ListTile(
                        leading: const Icon(Icons.inventory_2),
                        title: Text(name),
                        subtitle: Text('No. $number • Qty: $qty • Cond: $label ($score)'),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.remove_circle_outline),
                              onPressed: () => _incQty(row['id'] as String, -1),
                            ),
                            IconButton(
                              icon: const Icon(Icons.add_circle_outline),
                              onPressed: () => _incQty(row['id'] as String,  1),
                            ),
                            IconButton(
                              icon: const Icon(Icons.delete_outline),
                              onPressed: () => _deleteItem(row['id'] as String),
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
class _VaultPageState extends State<VaultPage> {
  final _search = TextEditingController();
  bool _loading = false;
  List<Map<String, dynamic>> _cardResults = [];
  List<Map<String, dynamic>> _vaultItems = [];

  Future<void> _searchCards() async {
    setState(() { _loading = true; });
    try {
      final res = await Supabase.instance.client
          .from('card_prints')
          .select()
          .ilike('name', '%${_search.text.trim()}%')
          .limit(50);
      _cardResults = (res as List).cast<Map<String, dynamic>>();
    } catch (e) {
      _cardResults = [];
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Search error: $e')));
    } finally {
      setState(() { _loading = false; });
    }
  }

  Future<void> _loadVault() async {
    final uid = Supabase.instance.client.auth.currentUser!.id;
    try {
      final rows = await Supabase.instance.client
          .from('v_vault_items')
          .select('id, card_id, qty, condition_label, condition_score, card_name, card_number')
          .eq('user_id', Supabase.instance.client.auth.currentUser!.id)
          .order('created_at', ascending: false)')
          .eq('user_id', uid)
          .order('created_at', ascending: false);
      _vaultItems = (rows as List).cast<Map<String, dynamic>>();
      setState(() {});
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Load vault error: $e')));
    }
  }

  Future<void> _addToVault(String cardId) async {
    final uid = Supabase.instance.client.auth.currentUser!.id;
    try {
      await Supabase.instance.client.from('vault_items').insert({
        'user_id': uid,
        'card_id': cardId,
        'qty': 1,
      });
      await _loadVault();
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Added to vault')));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Add error: $e')));
    }
  }

  @override
  void initState() {
    super.initState();
    _loadVault();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Your Vault')),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(children: [
          Row(children: [
            Expanded(
              child: TextField(
                controller: _search,
                decoration: InputDecoration(
                  labelText: 'Search card name',
                  suffixIcon: IconButton(icon: const Icon(Icons.search), onPressed: _searchCards),
                ),
                onSubmitted: (_) => _searchCards(),
              ),
            ),
          ]),
          if (_loading) const LinearProgressIndicator(),
          if (_cardResults.isNotEmpty) ...[
            const SizedBox(height: 8),
            Align(alignment: Alignment.centerLeft, child: Text('Results', style: TextStyle(fontWeight: FontWeight.bold))),
            Expanded(
              child: ListView.separated(
                itemCount: _cardResults.length,
                separatorBuilder: (_, __) => const Divider(height: 1),
                itemBuilder: (context, i) {
                  final c = _cardResults[i];
                  final name = (c['name'] ?? 'Card') as String;
                  final number = (c['number'] ?? '') as String;
                  final id = c['id'] as String;
                  return ListTile(
                    leading: const Icon(Icons.style),
                    title: Text(name),
                    subtitle: Text(number),
                    trailing: IconButton(
                      icon: const Icon(Icons.add_circle_outline),
                      onPressed: () => _addToVault(id),
                    ),
                  );
                },
              ),
            ),
          ] else ...[
            const SizedBox(height: 8),
            Align(alignment: Alignment.centerLeft, child: Text('Your Items', style: TextStyle(fontWeight: FontWeight.bold))),
            Expanded(
              child: RefreshIndicator(
                onRefresh: () async => _loadVault(),
                child: ListView.separated(
                  itemCount: _vaultItems.length,
                  separatorBuilder: (_, __) => const Divider(height: 1),
                  itemBuilder: (context, i) {
                    final row = _vaultItems[i];
                    final card = (row['cards'] ?? {}) as Map<String, dynamic>;
                    final name = (card['name'] ?? 'Card') as String;
                    final number = (card['number'] ?? '') as String;
                    final qty = row['qty'] ?? 1;
                    final label = row['condition_label'] ?? '-';
                    final score = row['condition_score']?.toString() ?? '-';
                    return ListTile(
                      leading: const Icon(Icons.inventory_2),
                      title: Text(name),
                      subtitle: Text('No. $number • Qty: $qty • Cond: $label ($score)'),
                    );
                  },
                ),
              ),
            ),
          ],
        ]),
      ),
    );
  }
}


